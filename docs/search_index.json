[["index.html", "NHS-R Community Handbook Introduction", " NHS-R Community Handbook NHS-R Community Last Updated 2023-01-27 Introduction In this book we’ve compiled a set of resources for anyone using R within the NHS and beyond. If you’d like to see additional resources included here, feel free to open an issue! "],["purpose.html", "1 Purpose", " 1 Purpose This book is a contribution of efforts and experiences from the members of the NHS-R Community - which is more than just NHS and greater than just R - in getting data science tools for their jobs. Very often an analyst or data scientist (or anyone interested in analysis) wants to try to use R or Python, particularly if they are wanting to set up Reproducible Analytical Pipelines with a code first approach, but getting access can sometimes be very difficult. The NHS is not one organisation and the experiences in getting data science tools varies widely so this is an attempt to bring together those experiences, with suggestions, on how best to approach the issue of access. The difficulties we encounter may well be shared with colleagues from all organisations, not just the NHS, and so we welcome all contributions to this collective knowledge. "],["nhs-r-community.html", "2 NHS-R Community 2.1 NHS PyCom", " 2 NHS-R Community This book is being supported by the NHS-R Community which was set up in 2018 to promote the use of R in the NHS. As a community we have grown and built up a reputation for openness, sharing and support through training, webinars, conferences and a very active and friendly Slack group. Whilst the focus was originally on R and the NHS, many members of the community use other tools and come from Local Authorities, Civil Service, Voluntary Sector and Charitable organisations as well as industry. 2.1 NHS PyCom We are supporters of the NHS PyCom with people often being on both communities and whilst our coding of choice may differ we have cross overs in data science areas like version control and sharing of code. "],["open-code-in-the-nhs.html", "3 Open code in the NHS 3.1 Introduction 3.2 References 3.3 Specific challenges", " 3 Open code in the NHS 3.1 Introduction There are number of organisations and publications advocating open coding in its various guises within the NHS and more generally across the public sector and academia. This page is intended as a place to collate pertinent literature and proposed/tried approaches to implementation of open code policies in situations in the NHS from individual teams up to entire organisations. There is also a significant crossover between open code and software engineering best practice, which means that they are often (always?) promoted together as an effective means to improve reproducibility, 3.1.1 Glossary (DRAFT) Reproducible Analytics Pipelines (RAP): analytics processes developed in open source programming languages and adhering to software engineering best practices to allow for reproducing analyses with very little effort. Repo/Repository: a set of files organised in a project for a specific purpose (such as [statements-on-tools][statments-on-tools] itself), containing code or documentation under version control. 3.2 References The following is a list of some of the material available online discussing and supporting open coding and software engineering approaches to code development in the NHS: Better, broader, safer using health data for research and analysis. Also known as The Goldacre Report1 - a systematic and far-reaching report, written on behalf of the Department of Health and Social Care, advocating for open coding and Reproducible Analytical Pipelines (RAP) in the NHS, Government Analysis Function Reproducible Analytical Pipelines (RAP) Strategy2 - released in June 2022 this is a comprehensive strategy for Government in summarising the finding of the RAP strategy since 2017 and the plan for future work, Office for Statistics Regulation – Overcoming Barriers to Adoption of RAP3 - a report written in support of RAP for adoption by all government departments doing analytics, describing the challenges and recommending solutions to address those challenges covering both organisational, team-level and individual barriers, NHS England Open Source Programme4 - a comprehensive description of why and how open source should be implemented in the NHS, including statements about best practice and a checklist for open sourcing code, NHS Digital RAP Community of Practice5 - a wealth of material pertaining to setting up and running RAP. The team also write blogs. 3.3 Specific challenges 3.3.1 Opening code without exposing data/‘secrets’ This issue is often raised (and rightly) when discussing open sourcing of code - how do you ensure that personal clinical or other sensitive data are not shared? In practice there are a number of approaches to this (see the NHS-X Open Source Policy6 for more practical advice on this) including setting up repos with automated checking for datasets and secrets (such as API keys) in order that risk of unintentional disclosure is minimised. 3.3.2 Opening code without giving away commercial/business/clinical proprietary information (and IP) Many members of the NHS-R community work in teams or individually without any formal training or support to enable them to determine whether there would be significant ramifications of publishing particular code, especially where business processes might be encoded in the project, or where there might be some IP issue. This makes the prospect of open sourcing rather daunting. 3.3.3 Coding in the open The NHS-X Open Source Policy7 recommends that all development/analytics work done in the NHS be coded in the open unless there is good reason not to. However it also states that “an internal code review should be conducted for all open source projects before publication”, which is at odds with coding in the open. References "],["statement-on-using-tools.html", "4 Statement on using tools 4.1 About this chapter 4.2 Introduction 4.3 What is inside a package? 4.4 Why not include all this useful code in R? 4.5 Where do you find packages? 4.6 An example 4.7 What’s the problem", " 4 Statement on using tools The NHS-R community aims to support the learning, application and exploitation of R in the NHS. A key part of this aim is to support every organisation in making R available as a viable means of conducting healthcare analytics. This is an evolving document which describes how and why to use R and other data science tools and to share and reuse code safely in health and social care settings. The scope and content are expanding all the time as the community collaboratively produces a definitive statement of the “NHS-R way”. Please file issues, make pull requests, and get involved, we’re very happy from hear from friends from inside and outside of NHS-R. Read it here https://nhs-r-community.github.io/statements-on-tools/ 4.1 About this chapter This chapter elaborates what is required to make R viable in practice. R is a powerful language for statistical work and other kinds of data analysis. Much of this power comes from the way that R fits together with two important helpers: R Studio and R packages. This chapter describes the way that R, R Studio, and R packages work together in non-technical language. Our aim in writing this simple introduction is to provide a useful resource to leaders within the NHS and other organisations in health and care who wish to support and encourage the use of R in their practice. Our motive in writing this chapter is to overcome the institutional reluctance that is often encountered when trying to use new open-source tools. For many years we have had guidance that open source programs should be encouraged. Yet open source tools are frequently identified as security or information governance risks by organisations. We think that these concerns are largely the result of confusion about the nature of open source tools. This chapter is therefore aimed at clearing up some of this confusion, by providing a simple, non-technical, and focused introduction to the tools that are an integral part of R. Although the current focus of this chapter is specific to R and its tools, we note that similar situations are found in many other languages and programmes. We discuss this below in the section Why not include all this useful code in R?. As the NHS-R Community matures we may extend this learning to cover other open-source tools such as Python. 4.1.1 Some use cases for this chapter To provide guidance to Information Governance (IG) practitioners who have been asked to evaluate the use of R in some health and care context To provide reassurance and explanation to collegues and managers when R is being considered for use in some project To support those new to R in understanding how the many packages and tools fit together 4.2 Introduction R uses packages. Packages are small, reusable packages of code that allow users to create and use new functions. These packages can be easily distributed so that users can adopt them in the code that they are writing. To illustate, imagine that you run into a tricky problem programming problem. We can think of three different ways of solving this problem: Write all-new code from scratch Copy-paste working code from somewhere else Use a package The traditional approach might be to solve the problem by writing completely new code from scratch. And sometimes writing original code is the best way to solve problems, particularly if those problems are very unusual. Often though the problems that we encounter are not at all unusual. Commonly encountered problems are, by definition, the kind of problems that we would most often encounter. We give an example below about times and dates, which frequently cause problems for programmers. Writing a completely original solution each time we encounter a common problem seems inefficient. So it is no surprise that code reuse is common practice across the field. The scale of websites dedicated to sharing useful code (like stack overflow) is testament to the deep sense of professional loathing that many programmers have for inefficiency in their work. But finding and sharing reliable code to solve common problems comes with difficulties of its own. You could look for solutions online, and then copy and paste any promising code chunks into your project. While generally quicker and easier than writing new code from scratch, copying code manually requires a surprisingly high degree of skill. Both an expert’s eye for assessing possible solutions, and the skills to appropriately adjust borrowed code to fit the requirements of your project are needed. Packages are a way of standardising and sharing useful code. Rather than copying and adjusting a block of code, you simply add the package to your programme. You can then use the new functions contained in the package as if you had written them yourself. They are a consistent way to extend the functions available to user. Many programming languages use packages (or libraries) in a similar way. Python is a good example, where many useful functions are done using third-party packages. Packages make R better: easier to use and learn, more flexible, and with richer options for analysis. They are a feature and not a bug, and for many users their work in R utterly depends on packages. 4.3 What is inside a package? “In R, the fundamental unit of shareable code is the package. A package bundles together code, data, documentation, and tests, and is easy to share with others.” Wickham and Bryan, 2019. R packages: Organize, Test, Document and Share Your Code To illustrate, we can show the code from two related NHS-R packages: NHSRplotthedots (CRAN) and NHSRdatasets (CRAN) Component Purpose Example Code Allows the user to use functions in their own code the code for the ptd_spc function used to create SPC charts Data Demonstrates the function(s), training new users sample of NHSR dataset linked to NHSRplotthedots Documentation User guides, package vignettes and other documentation documentation for the ptd_spc function And we can usually find at least three of these components in most R packages (tests are a bit more elusive, and are less commonly encountered). It’s also worth noting that the data included in community packages is sample data or open data that is really meant to help users experiment with the new functions in a package. It’s definitely not standard practice to share real data for analysis in this way. Lots of these standard datasets built into packages - like mtcars - are used over and over again as ways of demonstrating R functions. If you’re writing a package, we would encourage caution as to the data that you include. We won’t provide detailed guidance here on what’s okay to include in your package. But would be useful to remind package authors that the proper oversight should be carried out before sharing any data as part of your package. 4.4 Why not include all this useful code in R? Call the approach that R takes modular. R provides some core functions, but users are able to add modules (packages) that change the functions that are available. It’s like being able to customize the tools that you use to work on each project. Users coming to R from software that does not work like this can find this modular approach messy and odd. If you’ve grown up working in Microsoft Excel, then you will be accustomed to doing almost any task using just the build-in functions in the core software. For that user, switching to an environment where the user has to select and add small, specific, tools to achieve things can feel rather alien. And this difference has deep roots, representing a deep difference in software engineering philosophy. R broadly follows a UNIX-like small tools approach as a way of managing and reducing the complexity of computer systems. As Eric Raymond put it, this is one of the central rules of the UNIX philosophy: Rule of Modularity: Write simple parts connected by clean interfaces. Raymond 2003 The Art of UNIX Progamming Another reason: each project written in R is different. Isn’t it great to be able to select just the right tools needed to do the job properly? On this, you can find a list of some of the packages that the NHS-R community find particularly useful at https://github.com/nhs-r-community/awesome-nhsr. 4.5 Where do you find packages? The recognised global repository for R packages is called CRAN (the Comprehensive R Archive Network). R packages must pass through a strict system of checks across multiple platforms if they’re to be accepted into CRAN. Acceptance is a sign of quality and a protective measure that helps ensure that packages meet minimum standards. It also provides extra assurance to business IT teams that the packages are ‘safe’ for use. The power of packages is reflected in the number of them that are available. CRAN currently lists a total of 18872 packages. Adding and updating packages is one of the ways that R keeps developing. Many community groups - including NHS-R - have produced packages to do useful things for their work. And these packages are freely available to the community. That community spirit is an important part of the open software movement. We think that sharing useful code in an open way is important. Governments too think similarly. For example, see the requirement to make new code open source from NHS England digital openness and similar from ScotGov. The recent Goldacre review (2022) comes to similar conclusions: Libraries Useful functions often outgrow individual projects and build a broader user-base, especially when a large number of users are all trying to solve the same suite of related problems, with a range of related functions. When this happens, more experienced programmers move the work into reusable code ‘libraries’ and share them through package indexes or archive networks. The process of creating and sharing libraries can improve the quality of code, because work that is more widely used is likely to be more widely reviewed. Popular libraries tend to be well documented and come with clear explanations and examples, which decrease the barriers to entry for inexperienced coders: when more people use the work, more people invest in improving it. By creating and sharing a library, researchers contribute to the broader research community. This more advanced variety of code sharing is common in many areas of scientific research, such as Geographic Information Science, but it is less common at present in health data research. Better, broader, safer: using health data for research and analysis We believe that this approach is safe, and are not aware of any data protection issues that have arisen because of the use of packages in R. 4.6 An example image credit Working with dates is often a source of pain for data analysts. That’s because times and dates are surprisingly complicated. For example, there are lots of ways of storing and representing dates. There are also many inconsistencies - 24 hours in a day but 60 seconds in a minute, leap years, different numbers of days in months, time zones, and so on. Many analysts use an R package called lubridate to help manage dates and times. This package has lots of helpful functions for parsing, calculating, and representing dates and times. For example, imagine that you want to calculate the number of seconds between two dates. For simple cases, that’s not too hard to do in base R. But what if some of your time values cross time zones? What if clock time has changed (say, due to daylight savings) during that interval? The functions in the lubridate package allow analysts to ignore some of this complexity, meaning that they don’t need to write many lines of code in order to accomodate time zones each time they want to do a simple duration calculation. 4.7 What’s the problem As we’ve discussed above, the philosophy of using packages in R is rather different from other approaches. This can cause difficulties, particularly when risk management practices often assume that a programme is a broadly stable lump of functions, rather than a loose coalition of packages. To identify of this issues that we have encountered: Packages present a moving target for information governance. How can we assess the risk of something that is always liable to change? Our response to this: consider the system (R, RStudio, and packages) as the correct unit of analysis. Because packages are so widely used, it does not make sense to carry out information governance assessments of R by itself. There are so many packages (c.19k packages on CRAN), and there are several different sources for packages. How can we be sure that they are all safe? Our response to this is to point to community standards for packages. For example, CRAN carries out oversight on submitted packages, which have to meet certain standards. This precludes some worries about what might be lurking in a hypothetical package. It is also worth saying that we are aware of no cases where R packages have lead to security problems for users. Packages contain data, and therefore need data protection impact assessment. As discussed above, the data in R packages is used for testing, training, and demonstration purposes only, and isn’t a method for sharing live data between users. How can free software be trustworthy? Isn’t there going to be a catch? And who is responsible for ensuring the quality and safety of this software? Free open-source software (FOSS) is now widely used across sectors. Useful comments in FAQ section of HSMA site: It is also important to highlight that all software has potential vulnerabilities, including the proprietary software that you already have installed. Therefore, good software security practices should be maintained regardless of the software you are using. "],["nhs-r-vision.html", "5 NHS-R vision 5.1 Using R in research 5.2 Training 5.3 Development 5.4 Events 5.5 Appendix A: workshop", " 5 NHS-R vision 5.1 Using R in research A mistake in the operating room can threaten the life of one patient; a mistake in statistical analysis or interpretation can lead to hundreds of early deaths. So it is perhaps odd that, while we allow a doctor to conduct surgery only after years of training, we give SPSS® (SPSS, Chicago, IL) to almost anyone. Moreover, whilst only a surgeon would comment on surgical technique, it seems that anybody, regardless of statistical training, feels confident about commenting on statistical data. Vickers8 The NHS, as one of the largest hospital and healthcare systems, is a world leader in research. Research and evaluation are carried out as funded projects as well as unfunded audits/ evaluation. Both of which often require statistics- the analysis often being done in SPSS/ SAS or Excel. These methods can produce flawed analyses which, moreover, are not reproducible. Many trusts do not employ statistics experts and will only be able to get statistical help on funded work by buying in time from academic/external statisticians. This means that the pilot work that clinicians do prior to applying for large grants can often be flawed, or promising work ends up not being completed and the grants never awarded because they didn’t have the statistics expertise. While we would not expect clinicians to become expert coders, the NHS-R community should work to develop and deliver training that would help clinicians to be able to use R, including the development of training specifically for those with a clinical/ non coding background. This training needs to include R for statistics as well as the more commonly included data wrangling and visualisation. Better collaboration between R users working in academia and those in the NHS would also be beneficial. 5.2 Training The NHS-R community has developed/ is developing training on introduction to R, Shiny, R Markdown, git, and interactive plotting, amongst other things. Where are the gaps in training provision at the current time? How can NHS-R maintain/ increase the amount of training that it is able to deliver free to health and social care staff in the NHS in the UK? 5.3 Development The NHS-R community comprises members with a very wide diversity of job roles and skills. Although there is no one route to being a skilled and userful R developer in health and social care nonetheless the R community could usefully contribute to thinking on how to recruit, train, and develop analysts who use R and other open code approaches to data science/data analysis. 5.4 Events NHS-R already has a very successful conference but in the workshop there was a suggestion that there could be another NHS-R event focused on finding problems and solutions to them. There are several ways this could usefully be done, perhaps as a hackathon type approach where the problems are begun on during the event (finished during the event if there is time or worked on afterwards), or more of a problem definition/ alliance building type approach where the actual problems and the people who are interested in solving them are identified during the event and then the actual development is done later 5.5 Appendix A: workshop The following summarises a workshop about the future of NHS-R. 5.5.1 How has the NHS-R Community contributed to the system thus far? The positive contribution of the NHS-R Community was shared by all stakeholders and included the following highlights. For analysts: a safe, trusted, supportive space to learn and share together, a badge of honour, joy, confidence, upskilling, networking, working across organisational boundaries without needing permission. For leaders: signposting to a trusted brand and community that can influence policy which is underpinned by two value systems - NHS and open source. For the wider system: NHS-R has shifted thinking on how to secure analytic needs in the future and is perhaps the world’s first open-source community focused on health and care with admirers across the globe. 5.5.2 What is the need in the system given the change in the health and care landscape? The system has evolved, and progress has been made since the NHS-R Community was established. Still, some common themes persist regarding the needs of the system; skills gaps, infrastructure needs, better collaborative working and more structured peer learning, and the development of analytical leadership. Specific examples include: methodological training for analysts, setting professional standards, equipping leaders with analytical thinking skills, supporting the use of operations research methods, building links with social care and researchers, quality assurance processes and more. There was consensus that the NHS-R Community should focus on its strengths and not duplicate or drift from this because this may undermine its impact (perhaps because it becomes less relevant to its core members who are flourishing in the freedom of NHS-R). Below is a summary of what the “NHS-R Community” can do to support the system. 5.5.3 What can the NHS-R Community do to support the system? The following areas were identified. 1. Engage with NHS leaders to help them appreciate the potential of the NHS-R Community as a resource. 2. Work with NHSD/Transformation Directorate to remove barriers/create resources for IT departments to make open source tools readily available for analysts. 3. Provide an ‘Ask us’ hub where leaders and analysts can refer their questions or issues so that they can get a “grass roots” view from the NHS-R Community on how these might be best addressed. 4. Scaling local solutions nationally and vice-versa 5. Myth busting on “open-source” analytics including addressing security and information governance concerns. 6. Increased collaboration with national bodies such as NHS Transformation Directorate. 7. Set up an NHS Data Science Event (say over 3 to 5 days) for the NHS to identify common problems and develop shared solutions. 5.5.4 We asked a pre-mortem question - imagine the NHS-R Community has died, what led to its demise? The following were identified. The NHS-R Community was too reliant on volunteers who were unable to sustain their input. The NHS-R Community lost its values and was no longer a brand that was seen as safe, trusted, welcoming, especially to newbies. The NHS-R Community got too pre-occupied with contributing to the centre and so lost touch with grass roots analysts. National data science teams/bodies did not feel as if they had a stake in the NHS-R Community and so disengaged with it and could not see its relevance. R lost out to Python or some other open data science tool. The NHS-R Community did not offer enough “attractors” to analysts (eg wider training, support, development opportunities, etc). The NHS-R Community did not have adequate funds to continue to support it. The NHS-R Community lost its central organising team and so disintegrated. This should inform our approach to risk over the coming years. We should focus on resilience, being forward thinking and responsive, maintaining our values, broadening the organising team, actively seeking &amp; cultivating new members, and finding funding solutions and partners that can support our activities. References "],["references-1.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
